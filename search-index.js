var searchIndex = {};
searchIndex['disque'] = {"items":[[0,"","disque","disque-rs is a rust implementation of a Disque client library.\nIt uses redis-rs to handle the connection and low level protocol.",null,null],[3,"Disque","","",null,null],[11,"open","","Opens a new connection to a Disque server.",0,{"inputs":[{"name":"disque"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"hello","","The hello command returns information about the disque cluster.",0,{"inputs":[{"name":"disque"}],"output":{"name":"redisresult"}}],[11,"addjob","","Adds a job to a queue.",0,null],[11,"getjob_count","","Gets up to `count` jobs from certain `queues`.",0,null],[11,"getjob","","Gets a single job from any of the specified `queues`.",0,null],[11,"ackjob","","Acknowledge jobs.",0,null],[11,"fastack","","Fast acknowledge jobs.",0,null],[11,"working","","Tell Disque that a job is still processed.",0,null],[11,"nack","","Tells Disque to put back the job in the queue ASAP. Should be used when\nthe worker was not able to process a message and wants the message to\nbe put back into the queue in order to be processed again.",0,null],[11,"info","","Information about the server",0,{"inputs":[{"name":"disque"}],"output":{"name":"redisresult"}}],[11,"qlen","","Size of the queue",0,null],[11,"qpeek","","Gets jobs from `queue_name` up to the absolute number of `count`.\nIf count is negative, it will be from newest to oldest.",0,null],[11,"enqueue","","Queue jobs",0,null],[11,"dequeue","","Remove jobs from queue",0,null],[11,"deljob","","Completely delete a job from a single node.",0,null],[11,"show","","Returns full information about a job, like its current state and data.",0,null],[11,"qscan","","Iterator to run all queues that fulfil a criteria.\nThe iterator will batch into segments of approximate `count` size.",0,{"inputs":[{"name":"disque"},{"name":"u64"},{"name":"u64"},{"name":"bool"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"redisresult"}}],[11,"jscan_id","","Iterator to run all jobs that fulfil a criteria.\nThe iterator will batch into segments of approximate `count` size.",0,null]],"paths":[[3,"Disque"]]};
searchIndex['redis'] = {"items":[[0,"","redis","redis-rs is a rust implementation of a Redis client library.  It exposes\na general purpose interface to Redis and also provides specific helpers for\ncommonly used functionality.",null,null],[3,"Parser","","The internal redis response parser.",null,null],[3,"Client","","The client type.",null,null],[3,"Script","","Represents a lua script.",null,null],[3,"ScriptInvocation","","Represents a prepared script call.",null,null],[3,"Connection","","Represents a stateful redis TCP connection.",null,null],[3,"ConnectionInfo","","Holds the connection information that redis should use for connecting.",null,null],[12,"addr","","",0,null],[12,"db","","",0,null],[12,"passwd","","",0,null],[3,"PubSub","","Represents a pubsub connection.",null,null],[3,"Msg","","Represents a pubsub message.",null,null],[3,"Cmd","","Represents redis commands.",null,null],[3,"Pipeline","","Represents a redis command pipeline.",null,null],[3,"Iter","","Represents a redis iterator.",null,null],[3,"RedisError","","Represents a redis error.  For the most part you should be using\nthe Error trait to interact with this rather than the actual\nstruct.",null,null],[3,"InfoDict","","An info dictionary type.",null,null],[4,"ConnectionAddr","","",null,null],[13,"Tcp","","",1,null],[4,"Value","","Internal low-level redis value enum.",null,null],[13,"Nil","","A nil response from the server.",2,null],[13,"Int","","An integer response.  Note that there are a few situations\nin which redis actually returns a string for an integer which\nis why this library generally treats integers and strings\nthe same for all numeric responses.",2,null],[13,"Data","","An arbitary binary data.",2,null],[13,"Bulk","","A bulk response of more data.  This is generally used by redis\nto express nested structures.",2,null],[13,"Status","","A status response.",2,null],[13,"Okay","","A status response which represents the string \"OK\".",2,null],[4,"ErrorKind","","An enum of all error kinds.",null,null],[13,"ResponseError","","The server generated an invalid response.",3,null],[13,"AuthenticationFailed","","The authentication with the server failed.",3,null],[13,"TypeError","","Operation failed because of a type mismatch.",3,null],[13,"ExecAbortError","","A script execution was aborted.",3,null],[13,"BusyLoadingError","","The server cannot response because it's loading a dump.",3,null],[13,"NoScriptError","","A script that was requested does not actually exist.",3,null],[13,"InvalidClientConfig","","An error that was caused because the parameter to the\nclient were wrong.",3,null],[13,"IoError","","This kind is returned if the redis error is one that is\nnot native to the system.  This is usually the case if\nthe cause is another error.",3,null],[13,"ExtensionError","","An extension error.  This is an error created by the server\nthat is not directly understood by the library.",3,null],[4,"NumericBehavior","","Helper enum that is used in some situations to describe\nthe behavior of arguments in a numeric context.",null,null],[13,"NonNumeric","","",4,null],[13,"NumberIsInteger","","",4,null],[13,"NumberIsFloat","","",4,null],[5,"parse_redis_value","","Parses bytes into a redis value.",null,null],[5,"transaction","","This function simplifies transaction management slightly.  What it\ndoes is automatically watching keys and then going into a transaction\nloop util it succeeds.  Once it goes through the results are\nreturned.",null,null],[5,"parse_redis_url","","This function takes a redis URL string and parses it into a URL\nas used by rust-url.  This is necessary as the default parser does\nnot understand how redis URLs function.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"cmd","","Shortcut function to creating a command with a single argument.",null,{"inputs":[{"name":"str"}],"output":{"name":"cmd"}}],[5,"pipe","","Shortcut for creating a new pipeline.",null,{"inputs":[],"output":{"name":"pipeline"}}],[5,"pack_command","","Packs a bunch of commands into a request.  This is generally a quite\nuseless function as this functionality is nicely wrapped through the\n`Cmd` object, but in some cases it can be useful.  The return value\nof this can then be send to the low level `ConnectionLike` methods.",null,null],[5,"from_redis_value","","A shortcut function to invoke `FromRedisValue::from_redis_value`\nto make the API slightly nicer.",null,{"inputs":[{"name":"value"}],"output":{"name":"redisresult"}}],[11,"new","","Creates a new parser that parses the data behind the reader.  More\nthan one value can be behind the reader in which case the parser can\nbe invoked multiple times.  In other words: the stream does not have\nto be terminated.",5,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"parse_value","","parses a single value out of the stream.  If there are multiple\nvalues you can call this multiple times.  If the reader is not yet\nready this will block.",5,{"inputs":[{"name":"parser"}],"output":{"name":"redisresult"}}],[11,"open","","Connects to a redis server and returns a client.  This does not\nactually open a connection yet but it does perform some basic\nchecks on the URL that might make the operation fail.",6,{"inputs":[{"name":"client"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"get_connection","","Instructs the client to actually connect to redis and returns a\nconnection object.  The connection object can be used to send\ncommands to the server.  This can fail with a variety of errors\n(like unreachable host) so it's important that you handle those\nerrors.",6,{"inputs":[{"name":"client"}],"output":{"name":"redisresult"}}],[11,"get_pubsub","","Returns a PubSub connection.  A pubsub connection can be used to\nlisten to messages coming in through the redis publish/subscribe\nsystem.",6,{"inputs":[{"name":"client"}],"output":{"name":"redisresult"}}],[11,"req_packed_command","","",6,null],[11,"req_packed_commands","","",6,null],[11,"get_db","","",6,{"inputs":[{"name":"client"}],"output":{"name":"i64"}}],[11,"fmt","","",1,{"inputs":[{"name":"connectionaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"connectionaddr"}],"output":{"name":"connectionaddr"}}],[11,"fmt","","",0,{"inputs":[{"name":"connectioninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"connectioninfo"}],"output":{"name":"connectioninfo"}}],[11,"into_connection_info","","",0,{"inputs":[{"name":"connectioninfo"}],"output":{"name":"redisresult"}}],[11,"into_connection_info","url","",7,{"inputs":[{"name":"url"}],"output":{"name":"redisresult"}}],[11,"send_packed_command","redis","Sends an already encoded (packed) command into the TCP socket and\ndoes not read a response.  This is useful for commands like\n`MONITOR` which yield multiple items.  This needs to be used with\ncare because it changes the state of the connection.",8,null],[11,"recv_response","","Fetches a single response from the connection.  This is useful\nif used in combination with `send_packed_command`.",8,{"inputs":[{"name":"connection"}],"output":{"name":"redisresult"}}],[11,"req_packed_command","","",8,null],[11,"req_packed_commands","","",8,null],[11,"get_db","","",8,{"inputs":[{"name":"connection"}],"output":{"name":"i64"}}],[11,"subscribe","","Subscribes to a new channel.",9,{"inputs":[{"name":"pubsub"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"psubscribe","","Subscribes to a new channel with a pattern.",9,{"inputs":[{"name":"pubsub"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"unsubscribe","","Unsubscribes from a channel.",9,{"inputs":[{"name":"pubsub"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"punsubscribe","","Unsubscribes from a channel with a pattern.",9,{"inputs":[{"name":"pubsub"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"get_message","","Fetches the next message from the pubsub connection.  Blocks until\na message becomes available.  This currently does not provide a\nwait not to block :(",9,{"inputs":[{"name":"pubsub"}],"output":{"name":"redisresult"}}],[11,"get_channel","","Returns the channel this message came on.",10,{"inputs":[{"name":"msg"}],"output":{"name":"redisresult"}}],[11,"get_channel_name","","Convenience method to get a string version of the channel.  Unless\nyour channel contains non utf-8 bytes you can always use this\nmethod.  If the channel is not a valid string (which really should\nnot happen) then the return value is `\"?\"`.",10,{"inputs":[{"name":"msg"}],"output":{"name":"str"}}],[11,"get_payload","","Returns the message's payload in a specific format.",10,{"inputs":[{"name":"msg"}],"output":{"name":"redisresult"}}],[11,"get_payload_bytes","","Returns the bytes that are the message's payload.  This can be used\nas an alternative to the `get_payload` function if you are interested\nin the raw bytes in it.",10,null],[11,"from_pattern","","Returns true if the message was constructed from a pattern\nsubscription.",10,{"inputs":[{"name":"msg"}],"output":{"name":"bool"}}],[11,"get_pattern","","If the message was constructed from a message pattern this can be\nused to find out which one.  It's recommended to match against\nan `Option<String>` so that you do not need to use `from_pattern`\nto figure out if a pattern was set.",10,{"inputs":[{"name":"msg"}],"output":{"name":"redisresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"numericbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"numericbehavior"}],"output":{"name":"numericbehavior"}}],[11,"eq","","",4,{"inputs":[{"name":"numericbehavior"},{"name":"numericbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"numericbehavior"},{"name":"numericbehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",2,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"looks_like_cursor","","Checks if the return value looks like it fulfils the cursor\nprotocol.  That means the result is a bulk item of length\ntwo with the first one being a cursor and the second a\nbulk response.",2,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"rediserror"},{"name":"rediserror"}],"output":{"name":"bool"}}],[11,"from","","",11,{"inputs":[{"name":"rediserror"},{"name":"error"}],"output":{"name":"rediserror"}}],[11,"from","","",11,{"inputs":[{"name":"rediserror"},{"name":"utf8error"}],"output":{"name":"rediserror"}}],[11,"from","","",11,null],[11,"from","","",11,null],[11,"description","","",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"rediserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"rediserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Returns the kind of the error.",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"errorkind"}}],[11,"category","","Returns the name of the error category for display purposes.",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"str"}}],[11,"is_io_error","","Indicates that this failure is an IO failure.",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"bool"}}],[11,"is_connection_refusal","","Returns true if this error indicates that the connection was\nrefused.  You should generally not rely much on this function\nunless you are writing unit tests that want to detect if a\nlocal server is available.",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"bool"}}],[11,"extension_error_code","","Returns the extension error code",11,{"inputs":[{"name":"rediserror"}],"output":{"name":"option"}}],[11,"new","","Creates a new info dictionary from a string in the response of\nthe INFO command.  Each line is a key, value pair with the\nkey and value separated by a colon (`:`).  Lines starting with a\nhash (`#`) are ignored.",12,{"inputs":[{"name":"infodict"},{"name":"str"}],"output":{"name":"infodict"}}],[11,"get","","Fetches a value by key and converts it into the given type.\nTypical types are `String`, `bool` and integer types.",12,{"inputs":[{"name":"infodict"},{"name":"str"}],"output":{"name":"option"}}],[11,"find","","",12,{"inputs":[{"name":"infodict"},{"name":"str"}],"output":{"name":"option"}}],[11,"contains_key","","",12,{"inputs":[{"name":"infodict"},{"name":"str"}],"output":{"name":"bool"}}],[11,"len","","",12,{"inputs":[{"name":"infodict"}],"output":{"name":"usize"}}],[11,"to_redis_args","collections::string","",13,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"to_redis_args","collections::vec","",14,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"to_redis_args","core::option","",15,{"inputs":[{"name":"option"}],"output":{"name":"vec"}}],[11,"describe_numeric_behavior","","",15,{"inputs":[{"name":"option"}],"output":{"name":"numericbehavior"}}],[11,"is_single_arg","","",15,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"to_redis_args","serialize::json","",16,{"inputs":[{"name":"json"}],"output":{"name":"vec"}}],[11,"from_redis_value","collections::string","",13,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","collections::vec","",14,{"inputs":[{"name":"vec"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","std::collections::hash::map","",17,{"inputs":[{"name":"hashmap"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","std::collections::hash::set","",18,{"inputs":[{"name":"hashset"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","redis","",2,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","","",12,{"inputs":[{"name":"infodict"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","serialize::json","",16,{"inputs":[{"name":"json"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_value","core::option","",15,{"inputs":[{"name":"option"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"new","redis","Creates a new script object.",19,{"inputs":[{"name":"script"},{"name":"str"}],"output":{"name":"script"}}],[11,"get_hash","","Returns the script's SHA1 hash in hexadecimal format.",19,{"inputs":[{"name":"script"}],"output":{"name":"str"}}],[11,"key","","Creates a script invocation object with a key filled in.",19,{"inputs":[{"name":"script"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"arg","","Creates a script invocation object with an argument filled in.",19,{"inputs":[{"name":"script"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"prepare_invoke","","Returns an empty script invocation object.  This is primarily useful\nfor programmatically adding arguments and keys because the type will\nnot change.  Normally you can use `arg` and `key` directly.",19,{"inputs":[{"name":"script"}],"output":{"name":"scriptinvocation"}}],[11,"invoke","","Invokes the script directly without arguments.",19,{"inputs":[{"name":"script"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"arg","","Adds a regular argument to the invocation.  This ends up as `ARGV[i]`\nin the script.",20,{"inputs":[{"name":"scriptinvocation"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"key","","Adds a key argument to the invocation.  This ends up as `KEYS[i]`\nin the script.",20,{"inputs":[{"name":"scriptinvocation"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"invoke","","Invokes the script and returns the result.",20,{"inputs":[{"name":"scriptinvocation"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"clone","","",21,{"inputs":[{"name":"cmd"}],"output":{"name":"cmd"}}],[11,"next","","",22,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"new","","Creates a new empty command.",21,{"inputs":[{"name":"cmd"}],"output":{"name":"cmd"}}],[11,"arg","","Appends an argument to the command.  The argument passed must\nbe a type that implements `ToRedisArgs`.  Most primitive types as\nwell as vectors of primitive types implement it.",21,{"inputs":[{"name":"cmd"},{"name":"t"}],"output":{"name":"cmd"}}],[11,"cursor_arg","","Works similar to `arg` but adds a cursor argument.  This is always\nan integer and also flips the command implementation to support a\ndifferent mode for the iterators where the iterator will ask for\nanother batch of items when the local data is exhausted.",21,{"inputs":[{"name":"cmd"},{"name":"u64"}],"output":{"name":"cmd"}}],[11,"get_packed_command","","Returns the packed command as a byte vector.",21,{"inputs":[{"name":"cmd"}],"output":{"name":"vec"}}],[11,"in_scan_mode","","Returns true if the command is in scan mode.",21,{"inputs":[{"name":"cmd"}],"output":{"name":"bool"}}],[11,"query","","Sends the command as query to the connection and converts the\nresult to the target redis value.  This is the general way how\nyou can retrieve data.",21,{"inputs":[{"name":"cmd"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"iter","","Similar to `query()` but returns an iterator over the items of the\nbulk result or iterator.  In normal mode this is not in any way more\nefficient than just querying into a `Vec<T>` as it's internally\nimplemented as buffering into a vector.  This however is useful when\n`cursor_arg` was used in which case the iterator will query for more\nitems until the server side cursor is exhausted.",21,{"inputs":[{"name":"cmd"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and\nwill fail the task if the query fails because of an error.  This is\nmainly useful in examples and for simple commands like setting\nkeys.",21,{"inputs":[{"name":"cmd"},{"name":"connectionlike"}],"output":null}],[11,"new","","Creates an empty pipeline.  For consistency with the `cmd`\napi a `pipe` function is provided as alias.",23,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"cmd","","Starts a new command.  Functions such as `arg` then become\navailable to add more arguments to that command.",23,{"inputs":[{"name":"pipeline"},{"name":"str"}],"output":{"name":"pipeline"}}],[11,"add_command","","Adds a command to the pipeline.",23,{"inputs":[{"name":"pipeline"},{"name":"cmd"}],"output":{"name":"pipeline"}}],[11,"arg","","Adds an argument to the last started command.  This works similar\nto the `arg` method of the `Cmd` object.",23,{"inputs":[{"name":"pipeline"},{"name":"t"}],"output":{"name":"pipeline"}}],[11,"ignore","","Instructs the pipeline to ignore the return value of this command.\nIt will still be ensured that it is not an error, but any successful\nresult is just thrown away.  This makes result processing through\ntuples much easier because you do not need to handle all the items\nyou do not care about.",23,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"atomic","","This enables atomic mode.  In atomic mode the whole pipeline is\nenclosed in `MULTI`/`EXEC`.  From the user's point of view nothing\nchanges however.  This is easier than using `MULTI`/`EXEC` yourself\nas the format does not change.",23,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"query","","Executes the pipeline and fetches the return values.  Since most\npipelines return different types it's recommended to use tuple\nmatching to process the results:",23,{"inputs":[{"name":"pipeline"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and\nwill fail the task if the query of the pipeline fails.",23,{"inputs":[{"name":"pipeline"},{"name":"connectionlike"}],"output":null}],[11,"perform","","",23,{"inputs":[{"name":"pipeline"},{"name":"cmd"}],"output":{"name":"pipeline"}}],[6,"RedisResult","","Library generic result type.",null,null],[8,"ConnectionLike","","Implements the \"stateless\" part of the connection interface that is used by the\ndifferent objects in redis-rs.  Primarily it obviously applies to `Connection`\nobject but also some other objects implement the interface (for instance\nwhole clients or certain redis results).",null,null],[10,"req_packed_command","","Sends an already encoded (packed) command into the TCP socket and\nreads the single response from it.",24,null],[10,"req_packed_commands","","Sends multiple already encoded (packed) command into the TCP socket\nand reads `count` responses from it.  This is used to implement\npipelining.",24,null],[10,"get_db","","Returns the database this connection is bound to.  Note that this\ninformation might be unreliable because it's initially cached and\nalso might be incorrect if the connection like object is not\nactually connected.",24,{"inputs":[{"name":"connectionlike"}],"output":{"name":"i64"}}],[8,"IntoConnectionInfo","","Converts an object into a connection info struct.  This allows the\nconstructor of the client to accept connection information in a\nrange of different formats.",null,null],[10,"into_connection_info","","",25,{"inputs":[{"name":"intoconnectioninfo"}],"output":{"name":"redisresult"}}],[8,"Commands","","Implements common redis commands for connection like objects.  This\nallows you to send commands straight to a connection or client.  It\nis also implemented for redis results of clients which makes for\nvery convenient access in some basic cases.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"set","","Set the string value of a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",26,null],[11,"set_ex","","Set the value and expiration of a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",26,null],[11,"getset","","Set the string value of a key and return its old value.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"del","","Delete one or more keys.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"exists","","Determine if a key exists.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename","","Rename a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"append","","Append a value to a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCRBY` or `INCRBYFLOAT` depending on the type.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",26,null],[11,"hincr","","Increments a value.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key\nalready exists and holds a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key\nalready exists and holds a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"scard","","Get the number of members in a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"smembers","","Get all the members in a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"smove","","Move a member from one set to another.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"sunion","","Add multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",26,null],[11,"zcard","","Get the number of members in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta.\nIf the member does not exist, it is added with delta as its score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",26,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",26,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",26,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",26,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",26,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",26,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",26,{"inputs":[{"name":"commands"}],"output":{"name":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for\nfield names matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[8,"PipelineCommands","","Implements common redis commands for pipelines.  Unlike the regular\ncommands trait, this returns the pipeline rather than a result\ndirectly.  Other than that it works the same however.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"set","","Set the string value of a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",27,null],[11,"set_ex","","Set the value and expiration of a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",27,null],[11,"getset","","Set the string value of a key and return its old value.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"del","","Delete one or more keys.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"exists","","Determine if a key exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"expire","","Set a key's time to live in seconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"persist","","Remove the expiration from a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename","","Rename a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"append","","Append a value to a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCRBY` or `INCRBYFLOAT` depending on the type.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bitcount","","Count set bits in a string.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hset","","Sets a single field in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",27,null],[11,"hincr","","Increments a value.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hvals","","Gets all the values in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hlen","","Gets the length of a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"lindex","","Get an element from a list by its index.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"}],"output":{"name":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"llen","","Returns the length of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key\nalready exists and holds a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key\nalready exists and holds a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"sadd","","Add one or more members to a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"scard","","Get the number of members in a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiff","","Subtract multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sinter","","Intersect multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"smembers","","Get all the members in a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"smove","","Move a member from one set to another.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"spop","","Remove and return a random member from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember","","Get one random member from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"srem","","Remove one or more members from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"sunion","","Add multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",27,null],[11,"zcard","","Get the number of members in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta.\nIf the member does not exist, it is added with delta as its score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",27,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",27,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",27,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",27,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",27,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",27,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[8,"FromRedisValue","","This trait is used to convert a redis value into a more appropriate\ntype.  While a redis `Value` can represent any response that comes\nback from the redis server, usually you want to map this into something\nthat works better in rust.  For instance you might want to convert the\nreturn value into a `String` or an integer.",null,null],[10,"from_redis_value","","Given a redis `Value` this attempts to convert it into the given\ndestination type.  If that fails because it's not compatible an\nappropriate error is generated.",28,{"inputs":[{"name":"fromredisvalue"},{"name":"value"}],"output":{"name":"redisresult"}}],[11,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects\nfrom another vector of values.  This primarily exists internally\nto customize the behavior for vectors of tuples.",28,null],[8,"ToRedisArgs","","Used to convert a value into one or multiple redis argument\nstrings.  Most values will produce exactly one item but in\nsome cases it might make sense to produce more than one.",null,null],[10,"to_redis_args","","This converts the value into a vector of bytes.  Each item\nis a single argument.  Most items generate a vector of a\nsingle item.",29,{"inputs":[{"name":"toredisargs"}],"output":{"name":"vec"}}],[11,"describe_numeric_behavior","","Returns an information about the contained value with regards\nto it's numeric behavior in a redis context.  This is used in\nsome high level concepts to switch between different implementations\nof redis functions (for instance `INCR` vs `INCRBYFLOAT`).",29,{"inputs":[{"name":"toredisargs"}],"output":{"name":"numericbehavior"}}],[11,"is_single_arg","","Returns an indiciation if the value contained is exactly one\nargument.  It returns false if it's zero or more than one.  This\nis used in some high level functions to intelligently switch\nbetween `GET` and `MGET` variants.",29,{"inputs":[{"name":"toredisargs"}],"output":{"name":"bool"}}],[11,"describe_numeric_behavior","","Returns an information about the contained value with regards\nto it's numeric behavior in a redis context.  This is used in\nsome high level concepts to switch between different implementations\nof redis functions (for instance `INCR` vs `INCRBYFLOAT`).",29,{"inputs":[{"name":"toredisargs"}],"output":{"name":"numericbehavior"}}],[11,"is_single_arg","","Returns an indiciation if the value contained is exactly one\nargument.  It returns false if it's zero or more than one.  This\nis used in some high level functions to intelligently switch\nbetween `GET` and `MGET` variants.",29,{"inputs":[{"name":"toredisargs"}],"output":{"name":"bool"}}],[11,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects\nfrom another vector of values.  This primarily exists internally\nto customize the behavior for vectors of tuples.",28,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"set","","Set the string value of a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",26,null],[11,"set_ex","","Set the value and expiration of a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",26,null],[11,"getset","","Set the string value of a key and return its old value.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"del","","Delete one or more keys.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"exists","","Determine if a key exists.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename","","Rename a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"append","","Append a value to a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCRBY` or `INCRBYFLOAT` depending on the type.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",26,null],[11,"hincr","","Increments a value.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key\nalready exists and holds a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key\nalready exists and holds a list.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"scard","","Get the number of members in a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"smembers","","Get all the members in a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"smove","","Move a member from one set to another.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"sunion","","Add multiple sets.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",26,null],[11,"zcard","","Get the number of members in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta.\nIf the member does not exist, it is added with delta as its score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",26,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",26,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",26,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",26,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",26,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",26,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",26,{"inputs":[{"name":"commands"}],"output":{"name":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for\nfield names matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",26,{"inputs":[{"name":"commands"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",26,{"inputs":[{"name":"commands"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"set","","Set the string value of a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",27,null],[11,"set_ex","","Set the value and expiration of a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",27,null],[11,"getset","","Set the string value of a key and return its old value.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"del","","Delete one or more keys.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"exists","","Determine if a key exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"expire","","Set a key's time to live in seconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"persist","","Remove the expiration from a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename","","Rename a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"append","","Append a value to a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCRBY` or `INCRBYFLOAT` depending on the type.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bitcount","","Count set bits in a string.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hset","","Sets a single field in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",27,null],[11,"hincr","","Increments a value.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hvals","","Gets all the values in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"hlen","","Gets the length of a hash.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"lindex","","Get an element from a list by its index.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"}],"output":{"name":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"llen","","Returns the length of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key\nalready exists and holds a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key\nalready exists and holds a list.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"sadd","","Add one or more members to a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"scard","","Get the number of members in a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiff","","Subtract multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sinter","","Intersect multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"smembers","","Get all the members in a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"smove","","Move a member from one set to another.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"spop","","Remove and return a random member from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember","","Get one random member from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"srem","","Remove one or more members from a set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"sunion","","Add multiple sets.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",27,null],[11,"zcard","","Get the number of members in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta.\nIf the member does not exist, it is added with delta as its score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",27,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",27,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",27,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",27,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",27,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",27,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"}],"output":{"name":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",27,{"inputs":[{"name":"pipelinecommands"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}]],"paths":[[3,"ConnectionInfo"],[4,"ConnectionAddr"],[4,"Value"],[4,"ErrorKind"],[4,"NumericBehavior"],[3,"Parser"],[3,"Client"],[3,"Url"],[3,"Connection"],[3,"PubSub"],[3,"Msg"],[3,"RedisError"],[3,"InfoDict"],[3,"String"],[3,"Vec"],[4,"Option"],[4,"Json"],[3,"HashMap"],[3,"HashSet"],[3,"Script"],[3,"ScriptInvocation"],[3,"Cmd"],[3,"Iter"],[3,"Pipeline"],[8,"ConnectionLike"],[8,"IntoConnectionInfo"],[8,"Commands"],[8,"PipelineCommands"],[8,"FromRedisValue"],[8,"ToRedisArgs"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>",null,null],[3,"Ipv6Address","","A 128 bit IPv6 address",null,null],[12,"pieces","","",0,null],[3,"Url","","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1,null],[12,"query","","The query string of the URL.",1,null],[12,"fragment","","The fragment identifier of the URL.",1,null],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",null,null],[12,"username","","The username of the URL, as a possibly empty, percent-encoded string.",2,null],[12,"password","","The password of the URL.",2,null],[12,"host","","The host of the URL, either a domain name or an IPv4 address",2,null],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2,null],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2,null],[12,"path","","The path of the URL, as vector of percent-encoded strings.",2,null],[3,"UrlParser","","A set of optional parameters for URL parsing.",null,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A (DNS) domain name or an IPv4 address.",3,null],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",4,null],[13,"InvalidScheme","","",4,null],[13,"InvalidPort","","",4,null],[13,"InvalidIpv6Address","","",4,null],[13,"InvalidDomainCharacter","","",4,null],[13,"InvalidCharacter","","",4,null],[13,"InvalidBackslash","","",4,null],[13,"InvalidPercentEncoded","","",4,null],[13,"InvalidAtSymbolInUser","","",4,null],[13,"ExpectedTwoSlashes","","",4,null],[13,"ExpectedInitialSlash","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"RelativeUrlWithScheme","","",4,null],[13,"RelativeUrlWithoutBase","","",4,null],[13,"RelativeUrlWithNonRelativeBase","","",4,null],[13,"NonAsciiDomainsNotSupportedYet","","",4,null],[13,"CannotSetJavascriptFragment","","",4,null],[13,"CannotSetPortWithFileLikeScheme","","",4,null],[13,"CannotSetUsernameWithNonRelativeScheme","","",4,null],[13,"CannotSetPasswordWithNonRelativeScheme","","",4,null],[13,"CannotSetHostPortWithNonRelativeScheme","","",4,null],[13,"CannotSetHostWithNonRelativeScheme","","",4,null],[13,"CannotSetPortWithNonRelativeScheme","","",4,null],[13,"CannotSetPathWithNonRelativeScheme","","",4,null],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*.",null,null],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5,null],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5,null],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme.",null,null],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6,null],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6,null],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6,null],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme",null,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"ipv6address"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the host as a string.",3,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",0,{"inputs":[{"name":"ipv6address"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the IPv6 address to a string.",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"string"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils",null,null],[3,"UrlUtilsWrapper","url::urlutils","",null,null],[12,"url","","",7,null],[12,"parser","","",7,null],[0,"percent_encoding","url","",null,null],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`.",null,null],[5,"percent_encode","","Percent-encode the given bytes.",null,null],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`.",null,{"inputs":[{"name":"str"},{"name":"encodeset"},{"name":"string"}],"output":null}],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"encodeset"}],"output":{"name":"string"}}],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8.",null,null],[5,"from_hex","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data.",null,null],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords.",null,null],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL.",null,null],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL.",null,null],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization.",null,null],[11,"clone","","",8,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs.",null,null],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"format","url","Formatting utilities for URLs.",null,null],[3,"PathFormatter","url::format","Formatter and serializer for URL path data.",null,null],[12,"path","","The path as a slice of string-like objects (String or &str).",9,null],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data.",null,null],[12,"username","","URL username as a string slice.",10,null],[12,"password","","URL password as an optional string slice.",10,null],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field.",null,null],[12,"url","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ErrorHandler","url","This is called on non-fatal parse errors.",null,null],[6,"ParseResult","","",null,null],[11,"cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"from_str","","",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"new","","Return a new UrlParser with default parameters.",12,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"errorhandler"}],"output":{"name":"urlparser"}}],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",6,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1,{"inputs":[{"name":"url"},{"name":"i"}],"output":null}],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"encode","","",1,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv6Address"],[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[3,"UrlParser"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['sha1'] = {"items":[[0,"","sha1","A minimal implementation of SHA1 for rust.",null,null],[3,"Sha1","","Represents a Sha1 hash object in memory.",null,null],[11,"clone","","",0,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"sha1"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"output","","Retrieve digest result.  The output must be large enough to\ncontain result (20 bytes).",0,null],[11,"digest","","Shortcut for getting `output` into a new vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"vec"}}],[11,"hexdigest","","Shortcut for getting a hex output of the vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"string"}}]],"paths":[[3,"Sha1"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['matches'] = {"items":[[0,"","matches","",null,null],[14,"matches!","","",null,null],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null]],"paths":[]};
initSearch(searchIndex);
